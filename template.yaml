AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  ECE30861 Team 18 Phase 2 - Serverless Application

Globals:
  Function:
    Runtime: python3.13
    Timeout: 10
    MemorySize: 512

Resources:

  ece461Ph2Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Description: ECE461 Phase 2 API Gateway (OpenAPI Spec)
      DefinitionBody:
        openapi: 3.0.2
        info:
          title: ECE461 Phase 2 API
          version: 3.3.1

        components:
          schemas:
            #  Types and Models
            ArtifactType:
              type: string
              enum: [model, dataset, code]

            AuthenticationToken:
              type: string
              description: Authorization token passed via X-Authorization header.

            ArtifactData:
              type: object
              required: [url]
              properties:
                url:
                  type: string
                  format: uri

            Artifact:
              type: object
              required: [metadata, data]
              properties:
                metadata:
                  type: object
                  properties:
                    name:
                      type: string
                    id:
                      type: integer
                    type:
                      $ref: "#/components/schemas/ArtifactType"
                data:
                  type: object
                  properties:
                    url:
                      type: string
                      format: uri

        paths:
          /artifacts:
            post:
              requestBody:
                content:
                  application/json:
                    schema:
                      type: array
                      items:
                        $ref: "#/components/schemas/ArtifactQuery"
                required: true
              parameters:
                - name: offset
                  description:
                    "Provide this for pagination. If not provided, returns the first\
                    \ page of results."
                  schema:
                    $ref: "#/components/schemas/EnumerateOffset"
                  in: query
                  required: false

                - name: X-Authorization
                  in: header
                  required: true
                  description: Authentication header
                  schema:
                    $ref: "#/components/schemas/AuthenticationToken"

              responses:
                "200":
                  headers:
                    offset:
                      schema:
                        $ref: "#/components/schemas/EnumerateOffset"
                      examples:
                        ExampleRequest:
                          value: "3"
                  content:
                    application/json:
                      schema:
                        type: array
                        items:
                          $ref: "#/components/schemas/ArtifactMetadata"
                      examples:
                        ExampleResponse:
                          value:
                            - name: audience-classifier
                              id: 3847247294
                              type: model
                            - name: bookcorpus
                              id: 5738291045
                              type: dataset
                            - name: google-research-bert
                              id: 9182736455
                              type: code
                  description: List of artifacts
                "400":
                  description: "There is missing field(s) in the artifact_query or it is formed improperly, or is invalid."
                "403":
                  description: Authentication failed due to invalid or missing AuthenticationToken.
                "413":
                  description: Too many artifacts returned.
              operationId: ArtifactsList
              summary: Get the artifacts from the registry. (BASELINE)
              description: |-
                Get any artifacts fitting the query.
                Search for artifacts satisfying the indicated query.
                If you want to enumerate all artifacts, provide an array with a single artifact_query whose name is "*". The response is paginated; the response header includes the offset to use in the next query.

              #  Integrate with Lambda
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListArtifactsLambda.Arn}/invocations
                httpMethod: POST
                type: aws_proxy

          /reset:
            delete:
              responses:
                "200":
                  description: Registry is reset.
                "401":
                  description: You do not have permission to reset the registry.
                "403":
                  description: Authentication failed due to invalid or missing AuthenticationToken.
              operationId: RegistryReset
              summary: Reset the registry. (BASELINE)
              description: Reset the registry to a system default state.
            parameters:
              - name: X-Authorization
                description: ""
                schema:
                  $ref: "#/components/schemas/AuthenticationToken"
                in: header
                required: true

          /artifacts/{artifact_type}/{id}:
            get:
              parameters:
                - name: artifact_type
                  description: Type of artifact to fetch
                  schema:
                    $ref: "#/components/schemas/ArtifactType"
                  in: path
                  required: true
                - name: id
                  description: id of artifact to fetch
                  schema:
                    $ref: "#/components/schemas/ArtifactID"
                  in: path
                  required: true
              responses:
                "200":
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Artifact"
                      examples:
                        ExampleResponse:
                          value:
                            metadata:
                              name: openai-whisper
                              id: 7364518290
                              type: code
                            data:
                              url: https://github.com/openai/whisper
                  description: Return the artifact. url is required.
                "400":
                  description: "There is missing field(s) in the artifact_type or artifact_id or it is formed improperly, or is invalid."
                "403":
                  description: Authentication failed due to invalid or missing AuthenticationToken.
                "404":
                  description: Artifact does not exist.

              operationId: ArtifactRetrieve
              summary: Interact with the artifact with this id. (BASELINE)
              description: Return this artifact.

              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetArtifactLambda.Arn}/invocations
                httpMethod: GET
                type: aws_proxy

            put:
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: "#/components/schemas/Artifact"
                required: true
              parameters:
                - name: artifact_type
                  description: Type of artifact to update
                  schema:
                    $ref: "#/components/schemas/ArtifactType"
                  in: path
                  required: true
                - name: id
                  description: artifact id
                  schema:
                    $ref: "#/components/schemas/ArtifactID"
                  in: path
                  required: true
              responses:
                "200":
                  description: Artifact is updated.
                "400":
                  description: "There is missing field(s) in the artifact_type or artifact_id or it is formed improperly, or is invalid."
                "403":
                  description: Authentication failed due to invalid or missing AuthenticationToken.
                "404":
                  description: Artifact does not exist.
              operationId: ArtifactUpdate
              summary: Update this content of the artifact. (BASELINE)
              description: |-
                The name and id must match.

                The artifact source (from artifact_data) will replace the previous contents.

              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateArtifactLambda.Arn}/invocations
                httpMethod: PUT
                type: aws_proxy

            delete:
              parameters:
                - name: artifact_type
                  description: Type of artifact to delete
                  schema:
                    $ref: "#/components/schemas/ArtifactType"
                  in: path
                  required: true
                - name: id
                  description: artifact id
                  schema:
                    $ref: "#/components/schemas/ArtifactID"
                  in: path
                  required: true
              responses:
                "200":
                  description: Artifact is deleted.
                "400":
                  description: "There is missing field(s) in the artifact_type or artifact_id or invalid"
                "403":
                  description: Authentication failed due to invalid or missing AuthenticationToken.
                "404":
                  description: Artifact does not exist.
              operationId: ArtifactDelete
              summary: Delete this artifact. (NON-BASELINE)
              description: Delete only the artifact that matches "id". (id is a unique identifier for an artifact)
            parameters:
              - examples:
                  ExampleID:
                    value: model
                name: artifact_type
                description: Artifact type
                schema:
                  $ref: "#/components/schemas/ArtifactType"
                in: path
                required: true
              - examples:
                  ExampleID:
                    value: 3847247294
                name: id
                description: artifact id
                schema:
                  $ref: "#/components/schemas/ArtifactID"
                in: path
                required: true
              - examples:
                  ExampleToken:
                    value: bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                name: X-Authorization
                description: ""
                schema:
                  $ref: "#/components/schemas/AuthenticationToken"
                in: header
                required: true
                          #  Integrate with Lambda
            x-amazon-apigateway-integration:
              uri:
                Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteArtifactLambda.Arn}/invocations
              httpMethod: DELETE
              type: aws_proxy

          /artifact/{artifact_type}:
            post:
              operationId: ArtifactCreate
              summary: Register a new artifact. (BASELINE)
              description: >
                Register a new artifact by providing a downloadable source URL.
                Artifacts may share a name with existing entries.
              parameters:
                - name: artifact_type
                  in: path
                  required: true
                  description: Type of artifact being ingested.
                  schema:
                    $ref: "#/components/schemas/ArtifactType"

                - name: X-Authorization
                  in: header
                  required: true
                  description: Authentication header
                  schema:
                    $ref: "#/components/schemas/AuthenticationToken"

              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: "#/components/schemas/ArtifactData"
              responses:
                "201":
                  description: Success. Check the id in the returned metadata for the official ID.
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Artifact"
                "400":
                  description: There is missing field(s) in the artifact_data or it is formed improperly (must include a single URL).
                "403":
                  description: Authentication failed due to invalid or missing AuthenticationToken.
                "409":
                  description: Artifact exists already.
                "424":
                  description: Artifact is not registered due to disqualified rating.

              #  Integrate with Lambda
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateArtifactLambda.Arn}/invocations
                httpMethod: POST
                type: aws_proxy

            
      Cors:
        AllowMethods: "'OPTIONS,GET,POST,PUT,DELETE'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

##### LAMBDA FUNCTIONS

  CreateArtifactLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: create_artifact_lambda
      Handler: create_artifact_lambda.lambda_handler   # file.lambda_handler
      CodeUri: ./backend/app/handlers                  # directory with lambda_function.py
      Description: Lambda function to handle artifact creation requests.
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /artifact/{artifact_type}            # route on API Gateway
            Method: post                        # HTTP POST method
            RestApiId: !Ref ece461Ph2Api

      Environment:
        Variables:
          ENVIRONMENT: dev

  ListArtifactsLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: list_artifacts_lambda
      Handler: list_artifacts_lambda.lambda_handler   # file.lambda_handler
      CodeUri: ./backend/app/handlers                  # directory with lambda_function.py
      Description: Lambda function to handle listing all the artifacts
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /artifacts            # route on API Gateway
            Method: post                        # HTTP POST method
            RestApiId: !Ref ece461Ph2Api
      Environment:
        Variables:
          ENVIRONMENT: dev

  GetArtifactLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: get_artifact_lambda
      Handler: get_artifact_lambda.lambda_handler   # file.lambda_handler
      CodeUri: ./backend/app/handlers                  # directory with lambda_function.py
      Description: Lambda function to handle getting artifact with {id}
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /artifacts/{artifact_type}/{id}          # route on API Gateway
            Method: get                        # HTTP GET method
            RestApiId: !Ref ece461Ph2Api
      Environment:
        Variables:
          ENVIRONMENT: dev

  UpdateArtifactLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: get_artifact_lambda
      Handler: update_artifact_lambda.lambda_handler   # file.lambda_handler
      CodeUri: ./backend/app/handlers                  # directory with lambda_function.py
      Description: Lambda function to handle updating artifact with {id}
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /artifacts/{artifact_type}/{id}          # route on API Gateway
            Method: put                        # HTTP PUT method
            RestApiId: !Ref ece461Ph2Api
      Environment:
        Variables:
          ENVIRONMENT: dev

  DeleteArtifactLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: delete_artifact_lambda
      Handler: delete_artifact_lambda.lambda_handler   # file.lambda_handler
      CodeUri: ./backend/app/handlers                  # directory with lambda_function.py
      Description: Lambda function to handle deleting artifact with {id}
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /artifacts/{artifact_type}/{id}          # route on API Gateway
            Method: delete                        # HTTP DELETE method
            RestApiId: !Ref ece461Ph2Api
      Environment:
        Variables:
          ENVIRONMENT: dev
Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https:/${ece461Ph2Api}.execute-api.${AWS::Region}.amazonaws.com/dev"
